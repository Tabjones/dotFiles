"===============================================================================
"=============================================================================
"
"               ________ ++     ________
"             /VVVVVVVV\++++  /VVVVVVVV\
"             \VVVVVVVV/++++++\VVVVVVVV/
"              |VVVVVV|++++++++/VVVVV/''
"              |VVVVVV|++++++/VVVVV/''
"             +|VVVVVV|++++/VVVVV/''+
"           +++|VVVVVV|++/VVVVV/''+++++
"         +++++|VVVVVV|/VVV___++++++++++
"           +++|VVVVVVVVVV/##/ +_+_+_+_
"             +|VVVVVVVVV___ +/#_#,#_#,\
"              |VVVVVVV//##/+/#/+/#/''/#/
"              |VVVVV/''+/#/+/#/+/#/ /#/
"              |VVV/''++/#/+/#/ /#/ /#/
"              ''V/''  /##//##//##//###/
"                      ++
"                      ''       CONFIGURATION
"
"
"===============================================================================
"===============================================================================
"
set rtp+=$USERPROFILE\vimfiles

" Set all plugins.
call plug#begin('~/vimfiles/plugged')

Plug 'Valloric/YouCompleteMe'

Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

Plug 'altercation/vim-colors-solarized'

Plug 'nanotech/jellybeans.vim'

Plug 'zhaocai/GoldenView.Vim'

"Plug 'lifepillar/vim-mucomplete'

Plug 'SirVer/ultisnips'

Plug 'honza/vim-snippets'

Plug 'tpope/vim-fugitive'

Plug 'bling/vim-airline'

Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-vinegar'

Plug 'ctrlpvim/ctrlp.vim'

Plug 'airblade/vim-gitgutter'

Plug 'tomtom/tcomment_vim'

Plug 'tpope/vim-surround'

Plug 'majutsushi/tagbar'

Plug 'nathanaelkane/vim-indent-guides'

Plug 'Raimondi/delimitMate'

Plug 'mhinz/vim-startify'

Plug 'tpope/vim-endwise'

Plug 'osyo-manga/vim-anzu'

Plug 'mbbill/undotree'

Plug 'Valloric/MatchTagAlways'

Plug 'AndrewRadev/switch.vim'

Plug 'gabrielelana/vim-markdown'

Plug 'octol/vim-cpp-enhanced-highlight'

" Plug 'tpope/vim-sensible'

Plug 'tpope/vim-abolish'

Plug 'tpope/vim-repeat'

Plug 'xolox/vim-misc'

" Plug 'xolox/vim-easytags'

" Plug 'scrooloose/syntastic'

Plug 'pangloss/vim-javascript'

Plug 'godlygeek/tabular'

" Plug 'bronson/vim-trailing-whitespace'

Plug 'kshenoy/vim-signature'

Plug 'chiel92/vim-autoformat'

Plug 'lervag/vimtex'

call plug#end()

"-------------------------------------------------------------------------------
"                                                                        General
"-------------------------------------------------------------------------------
"Be (Im)proved!
set nocompatible
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
syntax enable
"set lines=9999 columns=9999
au GUIEnter * simalt ~x
" set nowfh                                  " no fixed size
" set noea eadirection=both                  " no equal size
" set wmw=0 wmh=0                            " squash other windows
" set wiw=9999 wh=999 hh=999 cwh=999 pvh=999 " enlarge current window
" Set git shell
" set shell=\"C:\Program\ Files\Git\git-cmd.exe\"
" ------------------------------------------------------------------------------
"                                                                       Commands
" ------------------------------------------------------------------------------
" Silently execute an external command
" No 'Press Any Key to Contiue BS'
" from: http://vim.wikia.com/wiki/Avoiding_the_%22Hit_ENTER_to_continue%22_prompts
command! -nargs=1 SilentCmd
            \ | execute ':silent !'.<q-args>
            \ | execute ':redraw!'
" Fixes common typos
command! W w
command! Q q
"matchit key
nmap za %
" ----------------------------------------
" Auto Commands
" ----------------------------------------
if has("autocmd")
    augroup MyAutoCommands
        " Clear the auto command group so we don't define it multiple times
        " Idea from http://learnvimscriptthehardway.stevelosh.com/chapters/14.html
        autocmd!
        " No formatting on o key newlines
        autocmd BufNewFile,BufEnter * set formatoptions-=o
        " No more complaining about untitled documents
        " Autosaves when you lose focus to the window
        autocmd FocusLost * :wa
        au  BufRead,BufNewFile *.hpp set filetype=cpp
        au  BufRead,BufNewFile *.vim set filetype=vim
    augroup END
endif
" ------------------------------------------------------------------------------
"                                                                          Color
" ------------------------------------------------------------------------------
" Force 256 color mode if available
"if $TERM =~ "-256color"
"   set t_Co=256
"endif

set background=dark
" Solarized """""""""""""""""""
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
" let g:solarized_termtrans = 1
" let g:solarized_termcolors=16
colorscheme solarized
" in solarized.vim line 256  for a darker background
" let s:base03      = "#001216"

"colorscheme pablo
"colorscheme jellybeans
" ------------------------------------------------------------------------------
"                                                                          Fonts
" ------------------------------------------------------------------------------
set guifont=Inconsolata-dz_for_Powerline:h11
let g:Powerline_symbols = 'fancy'
" ------------------------------------------------------------------------------
"                                                                 File Locations
" ------------------------------------------------------------------------------
set backupdir=$USERPROFILE\vimfiles\backup " Double // causes backups to use full file path
set directory=$USERPROFILE\vimfiles\tmp
" Persistent Undo
if has('persistent_undo')
    set undofile
    set undodir=$USERPROFILE\vimfiles\undo
endif
" ------------------------------------------------------------------------------
"                                                                             UI
" ------------------------------------------------------------------------------
set encoding=utf-8 " Use the right encoding
set ruler          " Ruler on
set relativenumber " Line numbers on, but relative to where your cursor is
set number         " Hybrid mode Line numbers! Relative plus current absolute
set nowrap         " Line wrapping off
set laststatus=2   " Always show the statusline
set cmdheight=2    " Make the command area two lines high
set noshowmode     " Don't show the mode since Powerline shows it
set title          " Set the title of the window in the terminal to the file
if exists('+colorcolumn')
    set colorcolumn=80 " Color the 80th column differently as a wrapping guide.
endif
" Disable tooltips for hovering keywords in Vim
if exists('+ballooneval')
    " This doesn't seem to stop tooltips for Ruby files
    set noballooneval
    " 100 second delay seems to be the only way to disable the tooltips
    set balloondelay=100000
endif
"remove gui bars
set guioptions -=m "menubar"
set guioptions -=T "Toolbar"
set guioptions -=r "right scrollbar"
set guioptions -=L "Left scrollbar"
set guioptions -=b "bottom scrollbar"
" ------------------------------------------------------------------------------
"                                                                      Behaviors
" ------------------------------------------------------------------------------
set backup             " Turn on backups
set autoread           " Automatically reload changes if detected
set wildmenu           " Turn on WiLd menu
set hidden             " remove hidden
set history=10000      " Number of things to remember in history.
" set cf                 " no errorumping.
set clipboard+=unnamed " Yanks go on clipboard instead.
set autowrite          " Writes on make/shell commands
set ttimeout
set timeoutlen=500     " Time to wait for a mapping.
set ttimeoutlen=100    " Time to wait for a command (after leader for example).
" set nofoldenable       " Disable folding entirely.
" set foldlevelstart=99  " I really don't like folds.
" set formatoptions=crql
" set iskeyword+=\$,-    " Add extra characters that are valid parts of variables
set nostartofline      " Don't go to the start of the line after some commands
set scrolloff=10       " Keep n lines below the last line when scrolling
set gdefault           " this makes search/replace global by default
set switchbuf=useopen  " Switch to an existing buffer if one exists
" set ttyfast
" set ssop=buffers,folds,resize,sesdir,tabpages,winpos,winsize  "" Session options
" ------------------------------------------------------------------------------
"                                                                    Text Format
" ------------------------------------------------------------------------------
set tabstop=4
set backspace=indent,eol,start " Delete everything with backspace
set shiftwidth=4               " Tabs under smart indent
set shiftround
set cindent
set autoindent
set smarttab
set expandtab
"set formatprg=par\ -w80         "par formatting
" ------------------------------------------------------------------------------
"                                                                      Searching
" ------------------------------------------------------------------------------
set ignorecase " Case insensitive search
set smartcase  " Non-case sensitive search
set incsearch  " Incremental search
set hlsearch   " Highlight search results
set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git,*.zip,*.aux
            \.sass-cache,*.class,*.scssc,*.cssc,sprockets%*,*.lessc,*/node_modules/*,*.swp,
            \rake-pipeline-*
" ------------------------------------------------------------------------------
"                                                                         Visual
" ------------------------------------------------------------------------------
set showmatch   " Show matching brackets.
set matchtime=2 " How many tenths of a second to blink
" Show invisible characters
set list
" Show trailing spaces as dots and carrots for extended lines.
" From Janus, http://git.io/PLbAlw
" Reset the listchars
set listchars=""
" make tabs visible
set listchars=tab:>-
" show trailing spaces as dots
set listchars+=trail:•
" The character to show in the last column when wrap is off and the line
" continues beyond the right of the screen
set listchars+=extends:>
" The character to show in the last column when wrap is off and the line
" continues beyond the right of the screen
set listchars+=precedes:<
" ------------------------------------------------------------------------------
"                                                                         Sounds
" ------------------------------------------------------------------------------
set noerrorbells
set visualbell
set t_vb=
" ------------------------------------------------------------------------------
"                                                                          Mouse
" ------------------------------------------------------------------------------
set mousehide  " Hide mouse after chars typed
set mouse=a    " Mouse in all modes
" ------------------------------------------------------------------------------
"                                                                       Mappings
" ------------------------------------------------------------------------------
" Set leader to spacebar
" Note: This line MUST come before any <leader> mappings
let mapleader="\<Space>"
" ---------------
" Regular Mappings
" ---------------
" Yank entire buffer with gy
nnoremap gy :0,$ y<cr>
" Select entire buffer
nnoremap vy ggVG
" Make Y behave like other capital commands.
" Hat-tip http://vimbits.com/bits/11
nnoremap Y y$
" Just to beginning and end of lines easier. From http://vimbits.com/bits/16
noremap H ^
noremap L $
" remap U to <C-r> for easier redo
" from http://vimbits.com/bits/356
nnoremap U <C-r>
" Don't move on *
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>
" Move on visual lines
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j
" ---------------
" Window Movement
" ---------------
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>
" Previous Window
nnoremap <silent> <C-p> :wincmd p<CR>
" Equal Size Windows
nnoremap <silent> <C-=> :wincmd =<CR>
" New Tab
nnoremap <silent> <leader>te :tabnew<CR>
" Next Tab
nnoremap <silent> <leader>tn :tabn<CR>
" Prev Tab
nnoremap <silent> <leader>tp :tabp<CR>
" ---------------
" Insert Mode Mappings
" ---------------
" Let's make escape better.
inoremap jk <Esc>
inoremap JK <Esc>

" ---------------
" Leader Mappings
" ---------------
" Create newlines without entering insert mode
nnoremap <silent><leader>o o<Esc>k
nnoremap <silent><leader>O O<Esc>j
" Clear search
noremap <silent><leader>nh :nohls<CR>
" Highlight search word under cursor without jumping to next
nnoremap <leader>h *<C-O>
" Toggle spelling mode with <leader>spe
nnoremap <silent> <leader>spe :set spell!<CR>
" Replace placeholders <+...+>
"nnoremap <silent> <Leader>ph /<+.\{-1,}+><cr>c/+>/e<cr>
" Split window vertically or horizontally *and* switch to the new split!
nnoremap <silent> <leader>sh :split<Bar>:wincmd j<CR>
nnoremap <silent> <leader>vs :vsplit<Bar>:wincmd l<CR>
" Close everything and quits (prompts if modified)
nnoremap <silent> <Leader>qq :qall<CR>
" Save&Close everything
nnoremap <silent> <Leader>wq :wqall<CR>
" Save everything
nnoremap <silent> <Leader>ww :wall<CR>
" Par reformatting
"map <leader>par {v}!par -jw80<CR>
"vmap <leader>par !par -jw80<CR>
" Cut/Copy/Paste to system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
" Enter Visual Line  with leader leader
nmap <Leader><Leader> V
"  source current file
nnoremap <silent><leader>rr  :source %<cr>
" ---------------
" Typo Fixes
" ---------------
noremap <F1> <Esc>
inoremap <F1> <Esc>
cnoremap w' w<CR>
" Disable the  ever-annoying Ex mode  shortcut key.  Instead, make Q  repeat the
" last macro instead. *hat tip* http://vimbits.com/bits/263
nnoremap Q @@
" Removes doc lookup mapping because it's easy to fat finger and never useful.
nnoremap K k
vnoremap K k

" ------------------------------------------------------------------------------
"                                                          Plugins Configuration
" ------------------------------------------------------------------------------

"Ctrl-P """"""""""""""""""""""""""""""""""""""
" Ensure Ctrl-P isn't bound by default
let g:ctrlp_map = ''
" Ensure max height isn't too large. (for performance)
let g:ctrlp_max_height = 10
" Fix new windows opening in split from startify
let g:ctrlp_reuse_window = 'startify\|netrw\|help\|quickfix'
let g:ctrlp_mruf_max = 350
let g:ctrlp_mruf_default_order = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 0
" " Leader Commands
nnoremap <leader>cp :CtrlP<CR>
" if executable('ag')
"     " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"     " HatTip: http://robots.thoughtbot.com/faster-grepping-in-vim and
"     " @ethanmuller
"     let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" endif
"Enable cmatcher plugin (must be installed externally)
"let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

"Fugitive """""""""""""""""""""""""""""""""""""
nnoremap <Leader>gc :Gcommit -v<CR>
nnoremap <Leader>gca :Gcommit -a -v<CR>
nnoremap <Leader>ga :Gcommit --amend<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gr :Gread<CR>
" Use :diffget and :diffput to stage/unstage hunks
" do for diffget(obtain);  dp for diffput
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gp :Git push<CR>
" Mnemonic, gu = Git Update
nnoremap <Leader>gu :Git pull<CR>
nnoremap <Leader>gd :Gdiff<CR>
" Start git command
nnoremap <leader>gi :Git<space>
" Undo the last commit
command! Gcundo :Git reset HEAD~1

" Vinegar """"""""""""""""""
"  - open netrw for current file
"  .  start a command for current file,  ! same with prepended bang
"  ~  go home
"  cg cl    :cd :lcd

" GitGutter """"""""""""""""
let g:gitgutter_realtime = 1
let g:gitgutter_eager    = 0
"let g:gitgutter_async    = 1
nmap <Leader>hn <Plug>GitGutterNextHunk
nmap <Leader>hN <Plug>GitGutterPrevHunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk
" highlight clear SignColumn
" highlight GitGutterAdd ctermfg=green
" highlight GitGutterChange ctermfg=yellow
" highlight GitGutterDelete ctermfg=red
" highlight GitGutterChangeDelete ctermfg=yellow

" AirLine """""""""""""""""""""""""""""""""""""
let g:airline_theme = 'jellybeans'
let g:airline_powerline_fonts = 1
let g:airline_detect_modified = 1
let g:airline_inactive_collapse = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#hunks#enabled = 1
let g:airline_exclude_preview = 1
let g:airline#extensions#tabline#buffer_idx_mode = 0
let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
" let g:airline#extensions#default#section_truncate_width = {}
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number

" Indent Guides """"""""""""""""
" let g:indent_guides_start_level=2
" let g:indent_guides_guide_size=1
let g:indent_guides_enable_on_vim_startup = 1

" UltiSnips """""""""""""""""""""""""
let g:UltiSnipsSnippetDirectories=["CustomUltiSnips"]
let g:UltiSnipsExpandTrigger="<leader>j"
let g:UltiSnipsJumpForwardTrigger="<leader>j"
let g:UltiSnipsJumpBackwardTrigger="<leader>k"
let g:UltiSnipsListSnippets="<leader><tab>"

"Startify """"""""""""""""""""
let g:startify_bookmarks = [
            \'$HOME\vimfiles\',
            \'E:\Software Development',
            \ ]
let g:startify_skiplist = [
            \ 'COMMIT_EDITMSG',
            \ $VIMRUNTIME .'/doc',
            \ ]
let g:startify_files_number = 5
let g:startify_change_to_dir = 1
let g:startify_session_persistence = 0
let g:startify_session_autoload = 0
let g:startify_session_delete_buffers = 1
let g:startify_change_to_vcs_root = 1
let g:startify_enable_special  = 1
let g:startify_session_sort = 1
hi StartifyFooter  ctermfg=171
hi StartifyHeader  ctermfg=152
hi StartifySlash   ctermfg=224
hi StartifyNumber  ctermfg=26
let g:startify_list_order = [
            \ [ 'Most recently used files'],
            \ 'files',
            \ [ 'Saved Sessions' ],
            \ 'sessions',
            \ [ 'Bookmarks' ],
            \ 'bookmarks',
            \ ]
let g:startify_custom_indices = ['a', 's', 'd', 'f', 'g']
let g:startify_session_remove_lines = ['winheight', 'winminheight', 'winwidth', 'winminwidth']
"let g:startify_custom_footer =
""     \ map(split(system('fortune | cowsay -f eyes'), '\n'), '"   ". v:val') + ['','']
let g:startify_custom_header = [
            \'        ________ ++     ________      ',
            \'       /VVVVVVVV\++++  /VVVVVVVV\     ',
            \'       \VVVVVVVV/++++++\VVVVVVVV/     ',
            \'        |VVVVVV|++++++++/VVVVV/''     ',
            \'        |VVVVVV|++++++/VVVVV/''       ',
            \'       +|VVVVVV|++++/VVVVV/''+        ',
            \'     +++|VVVVVV|++/VVVVV/''+++++      ',
            \'   +++++|VVVVVV|/VVV___++++++++++     ',
            \'     +++|VVVVVVVVVV/##/ +_+_+_+_      ',
            \'       +|VVVVVVVVV___ +/#_#,#_#,\     ',
            \'        |VVVVVVV//##/+/#/+/#/''/#/    ',
            \'        |VVVVV/''+/#/+/#/+/#/ /#/     ',
            \'        |VVV/''++/#/+/#/ /#/ /#/      ',
            \'        ''V/''  /##//##//##//###/     ',
            \'                 ++                   ',
            \'                 ''                   ',
            \]

nnoremap <leader>ss :SSave
nnoremap <leader>sl :SLoad
nnoremap <leader>sd :SDelete
nnoremap <leader>sc :SClose
nnoremap <leader>st :only<CR><bar>:tabonly<CR><bar>:Startify<CR>
" let g:startify_session_remove_lines = ['winwidth', 'winheight']

"" Anzu """"""""""""""
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
let g:airline#extensions#anzu#enabled = 1

" YouCompleteMe """""""""""""""
let g:ycm_complete_in_comments = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_error_symbol = '✘'
let g:ycm_warning_symbol = '❗'
" let g:ycm_key_invoke_completion= '<leader>tc'
" let g:ycm_global_ycm_extra_conf = '~/.vim/'
let g:ycm_confirm_extra_conf = 0
let g:ycm_goto_buffer_command = 'vertical-split'
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>ji :YcmCompleter GoToInclude<CR>
nnoremap <leader>ycm :YcmForceCompileAndDiagnostics<CR>
" let g:ycm_semantic_triggers = {
" \   'roslaunch' : ['="', '$(', '/'],
" \   'rosmsg,rossrv,rosaction' : ['re!^'],
" \ }
set completeopt+=menu,menuone,preview
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_disable_for_files_larger_than_kb=0

" Switch """""""""""
let g:switch_mapping = '<leader>-'
let g:switch_custom_definitions =
            \[
            \ ['read', 'write'],
            \ ['Read', 'Write'],
            \ ['left', 'right'],
            \ ['Left', 'Right'],
            \ ['on', 'off'],
            \ ['On', 'Off'],
            \ ['up', 'down'],
            \ ['Up', 'Down'],
            \ ['in', 'out'],
            \ ['In', 'Out'],
            \ ['x', 'y', 'z'],
            \ ['Q1', 'Q2', 'Q3', 'Q4'],
            \ ['q1', 'q2', 'q3', 'q4'],
            \ ['X', 'Y', 'Z'],
            \ ['pick', 'squash', 'fixup', 'reword', 'edit', 'exec'],
            \['false', 'true'],
            \['False', 'True'],
            \['FALSE', 'TRUE'],
            \]

" Undotree """"""""""""""""
let g:undotree_WindowLayout = 2
nnoremap <leader>u :UndotreeToggle<cr>

" TagBar """"""""""""""""""""""""""""""
nnoremap <leader>tb :TagbarToggle<CR>
let g:tagbar_ctags_bin = 'E:\Software Development\ctags58\ctags.exe'
let g:tagbar_type_markdown = {
            \ 'ctagstype': 'markdown',
            \ 'ctagsbin' : './markdown2ctags/markdown2ctags.py',
            \ 'ctagsargs' : '-f - --sort=yes',
            \ 'kinds' : [
            \ 's:sections',
            \ 'i:images'
            \ ],
            \ 'sro' : '|',
            \ 'kind2scope' : {
            \ 's' : 'section',
            \ },
            \ 'sort': 0,
            \ }
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" Cpp enanched highlight """""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

" Tcomment """"""""
let g:tcommentMaps = 0
nnoremap <silent><leader>cc :TComment<CR>
vnoremap <silent><leader>cc :TComment<CR>
nnoremap <silent><leader>cb :TCommentBlock<CR>
vnoremap <silent><leader>cb :TCommentBlock<CR>

" muComplete """""""""""""""""""""""""""
" set noshowmode shortmess+=c
" setl infercase
" setl completeopt-=preview
" setl completeopt+=menu,menuone
" let g:mucomplete#enable_auto_at_startup = 1
"
" let g:mucomplete#chains = {}
" let g:mucomplete#chains.default = ['omni', 'c-p', 'file', 'keyn', 'dict']
" let g:mucomplete#chains.markdown = ['keyn', 'spel', 'dict']
" let g:mucomplete#chains.cpp = ['tags', 'omni', 'keyn', 'file']
"
" let g:mucomplete#trigger_auto_pattern = {}
" let g:mucomplete#trigger_auto_pattern.default = '\a\a\a$'
" let g:mucomplete#trigger_auto_pattern.cpp     = '\a$'

" GoldenView """""""""""""""""""""
let g:goldenview__enable_default_mapping = 0
nmap <silent> <leader>m    <Plug>GoldenViewSwitchMain
nmap <silent> <leader>n    <Plug>GoldenViewNext
nmap <silent> <leader>s    <Plug>GoldenViewSplit

" Abolish """"""""""""""""""""""""""""
" :Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or}  {despe,sepa}rat{}
" :Subvert/address{,es}/reference{,s}/g """""""" for multiple substitutes
" Coercion reference:
" MixedCase (crm)
" camelCase (crc)
" snake_case (crs)
" UPPER_CASE (cru)

" Easytags
let g:easytags_cmd = 'E:\Software Development\ctags58\ctags.exe'
let g:easytags_file='$HOME\vimfiles\tagfile'
set tags+=$USERPROFILE\vimfiles\tagfile

" Tabular
if exists(":Tabularize")
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
endif
" Auto align on = sign when typing
inoremap <silent> = =<Esc>:call <SID>ealign()<CR>a
function! s:ealign()
    let p = '^.*=\s.*$'
    if exists(':Tabularize') && getline('.') =~# '^.*=' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
        let column = strlen(substitute(getline('.')[0:col('.')],'[^=]','','g'))
        let position = strlen(matchstr(getline('.')[0:col('.')],'.*=\s*\zs.*'))
        Tabularize/=/l1
        normal! 0
        call search(repeat('[^=]*=',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
endfunction

" Vim Signature """""""""""""
let g:SignatureMap = {
            \ 'Leader'             :  "m",
            \ 'PlaceNextMark'      :  "",
            \ 'ToggleMarkAtLine'   :  "m,",
            \ 'PurgeMarksAtLine'   :  "",
            \ 'DeleteMark'         :  "",
            \ 'PurgeMarks'         :  "",
            \ 'PurgeMarkers'       :  "m<BS>",
            \ 'GotoNextLineAlpha'  :  "",
            \ 'GotoPrevLineAlpha'  :  "",
            \ 'GotoNextSpotAlpha'  :  ",m",
            \ 'GotoPrevSpotAlpha'  :  ";m",
            \ 'GotoNextLineByPos'  :  "",
            \ 'GotoPrevLineByPos'  :  "",
            \ 'GotoNextSpotByPos'  :  "",
            \ 'GotoPrevSpotByPos'  :  "",
            \ 'GotoNextMarker'     :  "",
            \ 'GotoPrevMarker'     :  "",
            \ 'GotoNextMarkerAny'  :  "",
            \ 'GotoPrevMarkerAny'  :  "",
            \ 'ListBufferMarks'    :  "",
            \ 'ListBufferMarkers'  :  ""
            \ }

" Autoformat """"""""""""""""""""
let g:formatterpath = ['C:\Program Files (x86)\LLVM\bin\']
let g:formatdef_myclangformat = "'clang-format.exe'"
noremap <Leader>fef :Autoformat<CR>
